package nl.nn.adapterframework.util;

import java.io.*;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.rmi.server.UID;
/**
 * Miscellanous conversion functions.
 * @version Id
 */
public class Misc {
	public static final String version="$Id: Misc.java,v 1.4 2004-07-20 13:12:00 a1909356#db2admin Exp $";
	
	public static String createSimpleUUID_old() {
		StringBuffer sb=new StringBuffer();
		sb.append(System.currentTimeMillis());
		sb.append('-');
		sb.append(Math.round(Math.random()*1000000));
		return sb.toString();
	}

	/**
	* Creates a Universally Unique Identifier, via the java.rmi.server.UID class.
	*/
		public static String createSimpleUUID() {
		UID uid = new UID();

		// Replace semi colons by underscores, so IBIS will support it
		String uidString = uid.toString().replace(':', '_');
		return uidString;
	}
	 /**
     * Creates a Universally Unique Identifier.
     *
     * Similar to javax.mail.internet.UniqueValue, this implementation
     * generates a unique value by random number, the current
     * time (in milliseconds), and this system's hostname generated by
     * <code>InternetAddress.getLocalAddress()</code>.
     * @return A unique identifier is returned.
     */
    static public String createUUID ()
    { 
        String user = System.getProperty("user.name");
        InetAddress inetAddress=null;
        String ipAddress = null;
        
        try {
            inetAddress = InetAddress.getLocalHost();
            ipAddress = inetAddress.getHostAddress();
        } 
        
        catch (UnknownHostException uhe) {
            ipAddress = "127.0.0.1";
        }
        

        StringBuffer s = new StringBuffer();

        //Unique string is <ipaddress>.<currentTime>.<username>.<hashcode>
        s.append(ipAddress).append('.').append(System.currentTimeMillis()).append('.').
                                        append(user).append('.').append(Math.round(Math.random()*1000000));
        
        return s.toString();
    }
    

    
    
/**
 * Please consider using resourceToString() instead of relying on files.
 */
public static String fileToString(String fileName) throws IOException {
    return fileToString(fileName, null, false);
}
/**
 * Please consider using resourceToString() instead of relying on files.
 */
public static String fileToString(String fileName, String endOfLineString)
    throws IOException {
    return fileToString(fileName, endOfLineString, false);
}
/**
  * Please consider using resourceToString() instead of relying on files.
 */
public static String fileToString(
    String fileName,
    String endOfLineString,
    boolean xmlEncode)
    throws IOException {

	return readerToString(new FileReader(fileName), endOfLineString, xmlEncode);
}
public static String readerToString(
    Reader reader, 
    String endOfLineString,
    boolean xmlEncode)
    throws IOException {

    BufferedReader in = new BufferedReader(reader);
    StringBuffer sb = new StringBuffer();
    String line;
    while ((line = in.readLine()) != null) {

        if (line.length()==0 || line.getBytes()[0] != 26) { // skip end of file (ctrl-z)
            if (xmlEncode) {
                sb.append(XmlUtils.encodeChars(line));
            } else {
                sb.append(line);
            }
            if (endOfLineString != null)
                sb.append(endOfLineString);
        }
    }
    in.close();
    return sb.toString();

}
public static String resourceToString(URL resource) throws IOException {
    return resourceToString(resource, null, false);
}
public static String resourceToString(URL resource, String endOfLineString)
    throws IOException {
    return resourceToString(resource, endOfLineString, false);
}
public static String resourceToString(
    URL resource, 
    String endOfLineString,
    boolean xmlEncode)
    throws IOException {

	return readerToString(new InputStreamReader(resource.openStream()), endOfLineString, xmlEncode);
}
	public static void stringToFile(String string, String fileName)
       throws IOException
    {
       FileWriter fw = new FileWriter(fileName);
       fw.write(string); 
       fw.close();
    }
}
